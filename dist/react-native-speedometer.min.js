!(function (e, t) { typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = t(require('react'), require('react-native'), require('prop-types'), require('./utils/calculate-degree-from-labels.js'), require('./utils/calculate-label-from-value.js'), require('./utils/limit-value.js'), require('./utils/validate-size.js'), require('./style/index.js')) : typeof define === 'function' && define.amd ? define(['react', 'react-native', 'prop-types', './utils/calculate-degree-from-labels.js', './utils/calculate-label-from-value.js', './utils/limit-value.js', './utils/validate-size.js', './style/index.js'], t) : (e = e || self).speedometer = t(e.React, e.reactNative, e.PropTypes, e.calculateDegreeFromLabels, e.calculateLabelFromValue, e.limitValue, e.validateSize, e.style); }(this, (e, t, a, l, r, i, o, u) => {
  const n = 'default' in e ? e.default : e; a = a && a.hasOwnProperty('default') ? a.default : a, l = l && l.hasOwnProperty('default') ? l.default : l, r = r && r.hasOwnProperty('default') ? r.default : r, i = i && i.hasOwnProperty('default') ? i.default : i, o = o && o.hasOwnProperty('default') ? o.default : o; const s = 'default' in u ? u.default : u; const c = (function (e) {
    let a; let c; function p(a) { let l; return (l = e.call(this, a) || this).speedometerValue = new t.Animated.Value(a.defaultValue), l; } return c = e, (a = p).prototype = Object.create(c.prototype), a.prototype.constructor = a, a.__proto__ = c, p.prototype.render = function () {
      const e = this.props; const a = e.value; const c = e.size; const p = e.minValue; const d = e.maxValue; const m = e.easeDuration; const f = e.allowedDecimals; const b = e.labels; const y = e.needleImage; const v = e.wrapperStyle; const g = e.outerCircleStyle; const h = e.halfCircleStyle; const S = e.imageWrapperStyle; const C = e.imageStyle; const w = e.innerCircleStyle; const V = e.labelWrapperStyle; const j = e.labelStyle; const D = e.labelNoteStyle; const R = e.useNativeDriver; const q = l(180, b); const E = r(i(a, p, d, f), b, p, d); t.Animated.timing(this.speedometerValue, {
        toValue: i(a, p, d, f), duration: m, easing: t.Easing.linear, useNativeDriver: R,
      }).start(); const x = this.speedometerValue.interpolate({ inputRange: [p, d], outputRange: ['-90deg', '90deg'] }); const N = o(c, u.width - 20); return n.createElement(t.View, { style: [s.wrapper, { width: N, height: N / 2 }, v] }, n.createElement(t.View, {
        style: [s.outerCircle, {
          width: N, height: N / 2, borderTopLeftRadius: N / 2, borderTopRightRadius: N / 2,
        }, g],
      }, b.map((e, a) => {
        const l = 90 + a * q; return n.createElement(t.View, {
          key: e.name,
          style: [s.halfCircle, {
            backgroundColor: e.activeBarColor, width: N / 2, height: N, borderRadius: N / 2, transform: [{ translateX: N / 4 }, { rotate: `${l}deg` }, { translateX: N / 4 * -1 }],
          }, h],
        });
      }), n.createElement(t.Animated.View, { style: [s.imageWrapper, { top: -N / 15, transform: [{ rotate: x }] }, S] }, n.createElement(t.Image, { style: [s.image, { width: N, height: N }, C], source: y })), n.createElement(t.View, {
        style: [s.innerCircle, {
          width: 0.6 * N, height: N / 2 * 0.6, borderTopLeftRadius: N / 2, borderTopRightRadius: N / 2,
        }, w],
      })), n.createElement(t.View, { style: [s.labelWrapper, V] }, n.createElement(t.Text, { style: [s.label, j] }, i(a, p, d, f)), n.createElement(t.Text, { style: [s.labelNote, { color: E.labelColor }, D] }, E.name)));
    }, p;
  }(e.Component)); return c.defaultProps = {
    defaultValue: 50, minValue: 0, maxValue: 100, easeDuration: 500, allowedDecimals: 0, labels: [{ name: 'Pathetically weak', labelColor: '#ff2900', activeBarColor: '#ff2900' }, { name: 'Very weak', labelColor: '#ff5400', activeBarColor: '#ff5400' }, { name: 'So-so', labelColor: '#f4ab44', activeBarColor: '#f4ab44' }, { name: 'Fair', labelColor: '#f2cf1f', activeBarColor: '#f2cf1f' }, { name: 'Strong', labelColor: '#14eb6e', activeBarColor: '#14eb6e' }, { name: 'Unbelievably strong', labelColor: '#00ff6b', activeBarColor: '#00ff6b' }], needleImage: require('../images/needle2.png'), wrapperStyle: {}, outerCircleStyle: {}, halfCircleStyle: {}, imageWrapperStyle: {}, imageStyle: {}, innerCircleStyle: {}, labelWrapperStyle: {}, labelStyle: {}, labelNoteStyle: {}, useNativeDriver: !0,
  }, c.propTypes = {
    value: a.number.isRequired, defaultValue: a.number, size: a.number, minValue: a.number, maxValue: a.number, easeDuration: a.number, allowedDecimals: a.number, labels: a.array, needleImage: a.any, wrapperStyle: a.object, outerCircleStyle: a.object, halfCircleStyle: a.object, imageWrapperStyle: a.object, imageStyle: a.object, innerCircleStyle: a.object, labelWrapperStyle: a.object, labelStyle: a.object, labelNoteStyle: a.object, useNativeDriver: a.bool,
  }, c;
}));
// # sourceMappingURL=react-native-speedometer.min.js.map
