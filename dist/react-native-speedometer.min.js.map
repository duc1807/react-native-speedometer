{"version":3,"file":"react-native-speedometer.min.js","sources":["../src/utils/limit-value.js","../src/style/index.js","../src/index.js","../src/utils/calculate-degree-from-labels.js","../src/utils/calculate-label-from-value.js","../src/utils/validate-size.js"],"sourcesContent":["/* eslint radix: [\"error\", \"as-needed\"] */\n/* eslint-disable no-restricted-globals */\nfunction limitValue(value, minValue, maxValue, allowedDecimals) {\n  let currentValue = 0;\n  if (!isNaN(value)) {\n    if (!isNaN(allowedDecimals) && allowedDecimals > 0) {\n      currentValue = parseFloat(value).toFixed(allowedDecimals < 4 ? parseInt(allowedDecimals) : 4);\n    } else {\n      currentValue = parseInt(value);\n    }\n  }\n  return Math.min(Math.max(currentValue, minValue), maxValue);\n}\n\nexport default limitValue;\n","/* eslint import/no-unresolved: [2, { ignore: ['react-native'] }] */\nimport { StyleSheet, Dimensions } from 'react-native';\n\nexport const { width } = Dimensions.get('window');\n\nexport default StyleSheet.create({\n  wrapper: {\n    marginVertical: 5,\n    alignSelf: 'center',\n  },\n  // Circular Container\n  circleWrapper: {\n    overflow: 'hidden',\n  },\n  outerCircle: {\n    justifyContent: 'flex-end',\n    alignItems: 'center',\n    overflow: 'hidden',\n    borderColor: '#ffffff',\n    backgroundColor: '#e6e6e6',\n  },\n  halfCircle: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n  },\n  imageWrapper: {\n    position: 'absolute',\n    left: 0,\n    zIndex: 10,\n  },\n  image: {\n    resizeMode: 'stretch',\n    height: width - 20,\n    width: width - 20,\n  },\n  innerCircle: {\n    overflow: 'hidden',\n    justifyContent: 'flex-end',\n    alignItems: 'center',\n    backgroundColor: '#ffffff',\n    width: width * 0.6,\n    height: (width / 2) * 0.6,\n    borderTopLeftRadius: width / 2 - 10,\n    borderTopRightRadius: width / 2 - 10,\n  },\n  labelWrapper: {\n    marginVertical: 5,\n    alignItems: 'center',\n  },\n  label: {\n    fontSize: 25,\n    fontWeight: 'bold',\n  },\n  labelNote: {\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n});\n","/* eslint import/no-unresolved: [2, { ignore: ['react-native', 'react'] }] */\n/* eslint radix: [\"error\", \"as-needed\"] */\nimport React, { Component } from 'react';\nimport {\n  View,\n  Image,\n  Animated,\n  Easing,\n  Text,\n} from 'react-native';\nimport PropTypes from 'prop-types';\n\n// Utils\nimport calculateDegreeFromLabels from './utils/calculate-degree-from-labels';\nimport calculateLabelFromValue from './utils/calculate-label-from-value';\nimport limitValue from './utils/limit-value';\nimport validateSize from './utils/validate-size';\n\n// Style\nimport style, { width as deviceWidth } from './style';\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass Speedometer extends Component {\n  constructor(props) {\n    super(props);\n    this.speedometerValue = new Animated.Value(props.defaultValue);\n  }\n\n  render() {\n    const {\n      value,\n      size,\n      minValue,\n      maxValue,\n      easeDuration,\n      allowedDecimals,\n      labels,\n      needleImage,\n      wrapperStyle,\n      outerCircleStyle,\n      halfCircleStyle,\n      imageWrapperStyle,\n      imageStyle,\n      innerCircleStyle,\n      labelWrapperStyle,\n      labelStyle,\n      labelNoteStyle,\n      useNativeDriver,\n    } = this.props;\n    const degree = 180;\n    const perLevelDegree = calculateDegreeFromLabels(degree, labels);\n    const label = calculateLabelFromValue(\n      limitValue(value, minValue, maxValue, allowedDecimals), labels, minValue, maxValue,\n    );\n    Animated.timing(\n      this.speedometerValue,\n      {\n        toValue: limitValue(value, minValue, maxValue, allowedDecimals),\n        duration: easeDuration,\n        easing: Easing.linear,\n        useNativeDriver,\n      },\n    ).start();\n\n    const rotate = this.speedometerValue.interpolate({\n      inputRange: [minValue, maxValue],\n      outputRange: ['-90deg', '90deg'],\n    });\n\n    const currentSize = validateSize(size, deviceWidth - 20);\n    return (\n      <View style={[style.wrapper, {\n        width: currentSize,\n        height: currentSize / 2,\n      }, wrapperStyle]}\n      >\n        <View style={[style.outerCircle, {\n          width: currentSize,\n          height: currentSize / 2,\n          borderTopLeftRadius: currentSize / 2,\n          borderTopRightRadius: currentSize / 2,\n        }, outerCircleStyle]}\n        >\n          {labels.map((level, index) => {\n            const circleDegree = 90 + (index * perLevelDegree);\n            return (\n              <View\n                key={level.name}\n                style={[style.halfCircle, {\n                  backgroundColor: level.activeBarColor,\n                  width: currentSize / 2,\n                  height: currentSize,\n                  borderRadius: currentSize / 2,\n                  transform: [\n                    { translateX: currentSize / 4 },\n                    { rotate: `${circleDegree}deg` },\n                    { translateX: (currentSize / 4 * -1) },\n                  ],\n                }, halfCircleStyle]}\n              />\n            );\n          })}\n          <Animated.View style={[style.imageWrapper,\n            {\n              top: -(currentSize / 15),\n              transform: [{ rotate }],\n            },\n            imageWrapperStyle]}\n          >\n            <Image\n              style={[style.image,\n                {\n                  width: currentSize,\n                  height: currentSize,\n                }, imageStyle]}\n              source={needleImage}\n            />\n          </Animated.View>\n          <View style={[style.innerCircle, {\n            width: currentSize * 0.6,\n            height: (currentSize / 2) * 0.6,\n            borderTopLeftRadius: currentSize / 2,\n            borderTopRightRadius: currentSize / 2,\n          }, innerCircleStyle]}\n          />\n        </View>\n        <View style={[style.labelWrapper, labelWrapperStyle]}>\n          <Text style={\n            [style.label, labelStyle]}\n          >\n            {limitValue(value, minValue, maxValue, allowedDecimals)}\n          </Text>\n          <Text style={\n            [style.labelNote, { color: label.labelColor }, labelNoteStyle]}\n          >\n            {label.name}\n          </Text>\n        </View>\n      </View>\n    );\n  }\n}\n\nSpeedometer.defaultProps = {\n  defaultValue: 50,\n  minValue: 0,\n  maxValue: 100,\n  easeDuration: 500,\n  allowedDecimals: 0,\n  labels: [\n    {\n      name: 'Pathetically weak',\n      labelColor: '#ff2900',\n      activeBarColor: '#ff2900',\n    },\n    {\n      name: 'Very weak',\n      labelColor: '#ff5400',\n      activeBarColor: '#ff5400',\n    },\n    {\n      name: 'So-so',\n      labelColor: '#f4ab44',\n      activeBarColor: '#f4ab44',\n    },\n    {\n      name: 'Fair',\n      labelColor: '#f2cf1f',\n      activeBarColor: '#f2cf1f',\n    },\n    {\n      name: 'Strong',\n      labelColor: '#14eb6e',\n      activeBarColor: '#14eb6e',\n    },\n    {\n      name: 'Unbelievably strong',\n      labelColor: '#00ff6b',\n      activeBarColor: '#00ff6b',\n    },\n  ],\n  needleImage: require('../images/speedometer-needle.png'),\n  wrapperStyle: {},\n  outerCircleStyle: {},\n  halfCircleStyle: {},\n  imageWrapperStyle: {},\n  imageStyle: {},\n  innerCircleStyle: {},\n  labelWrapperStyle: {},\n  labelStyle: {},\n  labelNoteStyle: {},\n  useNativeDriver: true,\n};\n\nSpeedometer.propTypes = {\n  value: PropTypes.number.isRequired,\n  defaultValue: PropTypes.number,\n  size: PropTypes.number,\n  minValue: PropTypes.number,\n  maxValue: PropTypes.number,\n  easeDuration: PropTypes.number,\n  allowedDecimals: PropTypes.number,\n  labels: PropTypes.array,\n  needleImage: PropTypes.any,\n  wrapperStyle: PropTypes.object,\n  outerCircleStyle: PropTypes.object,\n  halfCircleStyle: PropTypes.object,\n  imageWrapperStyle: PropTypes.object,\n  imageStyle: PropTypes.object,\n  innerCircleStyle: PropTypes.object,\n  labelWrapperStyle: PropTypes.object,\n  labelStyle: PropTypes.object,\n  labelNoteStyle: PropTypes.object,\n  useNativeDriver: PropTypes.bool,\n};\n\nexport default Speedometer;\n","function calculateDegreeFromLabels(degree, labels) {\n  const perLevelDegree = (degree) / (labels.length);\n  return perLevelDegree;\n}\n\nexport default calculateDegreeFromLabels;\n","function calculateLabelFromValue(value, labels, minValue, maxValue) {\n  const currentValue = (value - minValue) / (maxValue - minValue);\n  const currentIndex = Math.round((labels.length - 1) * currentValue);\n  const label = labels[currentIndex];\n  return label;\n}\n\nexport default calculateLabelFromValue;\n","/* eslint radix: [\"error\", \"as-needed\"] */\n/* eslint-disable no-restricted-globals */\nfunction validateSize(current, original) {\n  let currentSize = original;\n  if (!isNaN(current)) {\n    currentSize = parseInt(current);\n  }\n  return currentSize;\n}\n\nexport default validateSize;\n"],"names":["limitValue","value","minValue","maxValue","allowedDecimals","currentValue","isNaN","parseFloat","toFixed","parseInt","Math","min","max","width","Dimensions","get","StyleSheet","create","wrapper","marginVertical","alignSelf","circleWrapper","overflow","outerCircle","justifyContent","alignItems","borderColor","backgroundColor","halfCircle","position","top","left","borderTopRightRadius","borderBottomRightRadius","imageWrapper","zIndex","image","resizeMode","height","innerCircle","borderTopLeftRadius","labelWrapper","label","fontSize","fontWeight","labelNote","Speedometer","props","speedometerValue","Animated","Value","defaultValue","render","this","size","easeDuration","labels","needleImage","wrapperStyle","outerCircleStyle","halfCircleStyle","imageWrapperStyle","imageStyle","innerCircleStyle","labelWrapperStyle","labelStyle","labelNoteStyle","useNativeDriver","perLevelDegree","degree","length","calculateDegreeFromLabels","round","calculateLabelFromValue","timing","toValue","duration","easing","Easing","linear","start","rotate","interpolate","inputRange","outputRange","currentSize","current","original","validateSize","deviceWidth","React","View","style","map","level","index","circleDegree","key","name","activeBarColor","borderRadius","transform","translateX","Image","source","Text","color","labelColor","Component","defaultProps","require","propTypes","PropTypes","number","isRequired","array","any","object","bool"],"mappings":"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"}
